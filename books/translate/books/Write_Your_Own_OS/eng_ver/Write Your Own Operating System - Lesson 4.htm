<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0047)http://www.cse.unl.edu/~jgompert/OS/lesson4.htm -->
<HTML xmlns="http://www.w3.org/TR/REC-html40" xmlns:v = 
"urn:schemas-microsoft-com:vml" xmlns:o = 
"urn:schemas-microsoft-com:office:office" xmlns:w = 
"urn:schemas-microsoft-com:office:word"><HEAD><TITLE>Write Your Own Operating System - Lesson 4</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content=Word.Document name=ProgId>
<META content="MSHTML 6.00.2600.0" name=GENERATOR>
<META content="Microsoft Word 9" name=Originator><LINK 
href="./lesson4_files/filelist.xml" rel=File-List><!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Joel Matthias Gompert</o:Author>
  <o:LastAuthor>Joel Matthias Gompert</o:LastAuthor>
  <o:Revision>7</o:Revision>
  <o:TotalTime>21</o:TotalTime>
  <o:Created>2001-12-28T03:21:00Z</o:Created>
  <o:LastSaved>2001-12-28T05:04:00Z</o:LastSaved>
  <o:Pages>2</o:Pages>
  <o:Words>442</o:Words>
  <o:Characters>2524</o:Characters>
  <o:Company>The Flaming Gymsocks</o:Company>
  <o:Lines>21</o:Lines>
  <o:Paragraphs>5</o:Paragraphs>
  <o:CharactersWithSpaces>3099</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
<STYLE>@page Section1 {size: 8.5in 11.0in; margin: 1.0in 1.25in 1.0in 1.25in; mso-header-margin: .5in; mso-footer-margin: .5in; mso-paper-source: 0; }
P.MsoNormal {
	FONT-SIZE: 12pt; MARGIN: 0in 0in 12pt; FONT-FAMILY: "Times New Roman"; mso-style-parent: ""; mso-pagination: widow-orphan; mso-fareast-font-family: "Times New Roman"; mso-bidi-font-weight: bold
}
LI.MsoNormal {
	FONT-SIZE: 12pt; MARGIN: 0in 0in 12pt; FONT-FAMILY: "Times New Roman"; mso-style-parent: ""; mso-pagination: widow-orphan; mso-fareast-font-family: "Times New Roman"; mso-bidi-font-weight: bold
}
DIV.MsoNormal {
	FONT-SIZE: 12pt; MARGIN: 0in 0in 12pt; FONT-FAMILY: "Times New Roman"; mso-style-parent: ""; mso-pagination: widow-orphan; mso-fareast-font-family: "Times New Roman"; mso-bidi-font-weight: bold
}
H1 {
	FONT-SIZE: 16pt; MARGIN: 0in 0in 12pt; FONT-FAMILY: Arial; mso-pagination: widow-orphan; mso-bidi-font-weight: normal; mso-style-next: Normal; mso-outline-level: 1; mso-bidi-font-size: 12.0pt; mso-bidi-font-family: "Courier New"; mso-font-kerning: 0pt
}
P.MsoTitle {
	FONT-WEIGHT: bold; FONT-SIZE: 16pt; MARGIN: 12pt 0in 3pt; FONT-FAMILY: Arial; TEXT-ALIGN: center; mso-pagination: widow-orphan; mso-fareast-font-family: "Times New Roman"; mso-outline-level: 1; mso-font-kerning: 14.0pt
}
LI.MsoTitle {
	FONT-WEIGHT: bold; FONT-SIZE: 16pt; MARGIN: 12pt 0in 3pt; FONT-FAMILY: Arial; TEXT-ALIGN: center; mso-pagination: widow-orphan; mso-fareast-font-family: "Times New Roman"; mso-outline-level: 1; mso-font-kerning: 14.0pt
}
DIV.MsoTitle {
	FONT-WEIGHT: bold; FONT-SIZE: 16pt; MARGIN: 12pt 0in 3pt; FONT-FAMILY: Arial; TEXT-ALIGN: center; mso-pagination: widow-orphan; mso-fareast-font-family: "Times New Roman"; mso-outline-level: 1; mso-font-kerning: 14.0pt
}
P.MsoBodyText {
	FONT-SIZE: 12pt; MARGIN: 0in 0in 12pt; FONT-FAMILY: "Times New Roman"; mso-pagination: widow-orphan; mso-fareast-font-family: "Times New Roman"
}
LI.MsoBodyText {
	FONT-SIZE: 12pt; MARGIN: 0in 0in 12pt; FONT-FAMILY: "Times New Roman"; mso-pagination: widow-orphan; mso-fareast-font-family: "Times New Roman"
}
DIV.MsoBodyText {
	FONT-SIZE: 12pt; MARGIN: 0in 0in 12pt; FONT-FAMILY: "Times New Roman"; mso-pagination: widow-orphan; mso-fareast-font-family: "Times New Roman"
}
A:link {
	COLOR: blue; TEXT-DECORATION: underline; text-underline: single
}
SPAN.MsoHyperlink {
	COLOR: blue; TEXT-DECORATION: underline; text-underline: single
}
A:visited {
	COLOR: purple; TEXT-DECORATION: underline; text-underline: single
}
SPAN.MsoHyperlinkFollowed {
	COLOR: purple; TEXT-DECORATION: underline; text-underline: single
}
DIV.Section1 {
	page: Section1
}
</STYLE>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="1027"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--></HEAD>
<BODY lang=EN-US style="tab-interval: .5in" vLink=purple link=blue>
<DIV class=Section1>
<P class=MsoTitle><A name=_Toc534120514>Write Your Own Operating System 
Tutorial</A></P>
<DIV 
style="BORDER-RIGHT: medium none; PADDING-RIGHT: 0in; BORDER-TOP: medium none; PADDING-LEFT: 0in; PADDING-BOTTOM: 1pt; BORDER-LEFT: medium none; PADDING-TOP: 0in; BORDER-BOTTOM: windowtext 0.75pt solid">
<P class=MsoNormal 
style="BORDER-RIGHT: medium none; PADDING-RIGHT: 0in; BORDER-TOP: medium none; PADDING-LEFT: 0in; PADDING-BOTTOM: 0in; BORDER-LEFT: medium none; PADDING-TOP: 0in; BORDER-BOTTOM: medium none; mso-border-bottom-alt: solid windowtext .75pt; mso-padding-alt: 0in 0in 1.0pt 0in"><SPAN 
style="mso-bookmark: _Toc534120514"></SPAN><A 
href="http://www.cse.unl.edu/~jgompert/OS/lesson3.htm"><SPAN 
style="mso-bookmark: _Toc534120514">Previous Lesson</SPAN><SPAN 
style="mso-bookmark: _Toc534120514"></SPAN></A><SPAN 
style="mso-bookmark: _Toc534120514"><SPAN 
style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
</SPAN></SPAN><A 
href="http://www.cse.unl.edu/~jgompert/OS/TableOfContents.htm"><SPAN 
style="mso-bookmark: _Toc534120514">Table of Contents</SPAN><SPAN 
style="mso-bookmark: _Toc534120514"></SPAN></A><SPAN 
style="mso-bookmark: _Toc534120514"><SPAN 
style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
</SPAN></SPAN><A href="http://www.cse.unl.edu/~jgompert/OS/lesson5.htm"><SPAN 
style="mso-bookmark: _Toc534120514">Next Lesson</SPAN><SPAN 
style="mso-bookmark: _Toc534120514"></SPAN></A><SPAN 
style="mso-bookmark: _Toc534120514"></SPAN></P></DIV><SPAN 
style="mso-bookmark: _Toc534120514"></SPAN>
<H1><A name=_Toc534120517>Lesson 4: Hello, World</A></H1>
<P class=MsoNormal>Now is the time you’ve all been waiting for.<SPAN 
style="mso-spacerun: yes">&nbsp; </SPAN>Finally we get to the classic “first” 
program.<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Every decent programming 
book has a “Hello, World” program, and now we know enough to make a “Hello, 
World” operating system.<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>If you 
have done some experimenting on your own and have already done this, then you 
may want to skip this lesson.<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>We 
will create a function to print a string and use it to display our message.</P>
<P class=MsoNormal>It will get tedious to print one character at a time to the 
screen, so we’ll create a function to print a zero-terminated string to the 
screen.<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>This is just a simple loop 
that prints all the character in a string one at a time.</P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in"><SPAN 
style="FONT-FAMILY: 'Courier New'">; 
---------------------------------------------<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in"><SPAN 
style="FONT-FAMILY: 'Courier New'">; Print a null-terminated string on the 
screen<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in"><SPAN 
style="FONT-FAMILY: 'Courier New'">; 
---------------------------------------------<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in"><SPAN 
style="FONT-FAMILY: 'Courier New'">putstr:<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in"><SPAN 
style="FONT-FAMILY: 'Courier New'"><SPAN 
style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>lodsb<SPAN 
style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
</SPAN>; AL = [DS:SI]<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in"><SPAN 
style="FONT-FAMILY: 'Courier New'"><SPAN 
style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>or al, al<SPAN 
style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>; Set zero flag if 
al=0<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in"><SPAN 
style="FONT-FAMILY: 'Courier New'"><SPAN 
style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>jz putstrd<SPAN 
style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp; </SPAN>; jump to putstrd if zero 
flag is set<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in"><SPAN 
style="FONT-FAMILY: 'Courier New'"><SPAN 
style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>mov ah, 0x0e<SPAN 
style="mso-tab-count: 1">&nbsp; </SPAN>; video function 0Eh (print 
char)<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in"><SPAN 
style="FONT-FAMILY: 'Courier New'"><SPAN 
style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>mov bx, 0x0007<SPAN 
style="mso-tab-count: 1"> </SPAN>; color<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in"><SPAN 
style="FONT-FAMILY: 'Courier New'"><SPAN 
style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>int 
0x10<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in"><SPAN 
style="FONT-FAMILY: 'Courier New'"><SPAN 
style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>jmp 
putstr<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in"><SPAN 
style="FONT-FAMILY: 'Courier New'">putstrd:<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in"><SPAN 
style="FONT-FAMILY: 'Courier New'"><SPAN 
style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp; 
</SPAN>retn<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN-BOTTOM: 0pt"><SPAN 
style="FONT-FAMILY: 'Courier New'"><![if !supportEmptyParas]><![endif]>&nbsp;<o:p></o:p></SPAN></P>
<P class=MsoNormal>Now, a little on how to use this function.<SPAN 
style="mso-spacerun: yes">&nbsp; </SPAN>First you have to load the address of 
the first character of the string into the register SI.<SPAN 
style="mso-spacerun: yes">&nbsp; </SPAN>Then simply call this subroutine <SPAN 
style="FONT-FAMILY: 'Courier New'">putstr</SPAN>.</P>
<P class=MsoNormal>You can create a string like this in your assembly file.</P>
<P class=MsoNormal style="MARGIN-LEFT: 0.5in"><SPAN 
style="FONT-FAMILY: 'Courier New'">msg<SPAN style="mso-tab-count: 1">&nbsp; 
</SPAN>db 'Hello, World!', 0<o:p></o:p></SPAN></P>
<P class=MsoNormal>The zero on the end terminates the string.<SPAN 
style="mso-spacerun: yes">&nbsp; </SPAN>Then you can print the string to the 
screen using the following instructions.</P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 31.5pt"><SPAN 
style="FONT-FAMILY: 'Courier New'">mov si, msg<SPAN 
style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp; </SPAN>; Load address of 
message<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 31.5pt"><SPAN 
style="FONT-FAMILY: 'Courier New'">call putstr<SPAN 
style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp; </SPAN>; Print the 
message<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN-BOTTOM: 0pt"><SPAN 
style="FONT-FAMILY: 'Courier New'"><![if !supportEmptyParas]><![endif]>&nbsp;<o:p></o:p></SPAN></P>
<P class=MsoNormal>There is just one more thing that needs to be set up before 
this will work.<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>The address <SPAN 
style="FONT-FAMILY: 'Courier New'">msg</SPAN>, loaded into the register <SPAN 
style="FONT-FAMILY: 'Courier New'">SI</SPAN>, is actually an offset off the 
beginning of the beginning of the segment that is pointed to by the register 
DS.<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>So, before you can use the 
address <SPAN style="FONT-FAMILY: 'Courier New'">msg</SPAN>, you must set up the 
current data segment.<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>For now, we 
will use flat addressing from the bottom of physical RAM.<SPAN 
style="mso-spacerun: yes">&nbsp; </SPAN>To set the data segment to start from 
the bottom, set the DS register to zero.<SPAN style="mso-spacerun: yes">&nbsp; 
</SPAN>The following two instructions will do this.</P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in"><SPAN 
style="FONT-FAMILY: 'Courier New'">xor<SPAN style="mso-tab-count: 1">&nbsp; 
</SPAN>ax, ax<SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp; </SPAN>; Zero out 
ax<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in"><SPAN 
style="FONT-FAMILY: 'Courier New'">mov<SPAN style="mso-tab-count: 1">&nbsp; 
</SPAN>ds, ax<SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp; </SPAN>; Set data 
segment to base of RAM<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN-BOTTOM: 0pt"><SPAN 
style="FONT-FAMILY: 'Courier New'"><![if !supportEmptyParas]><![endif]>&nbsp;<o:p></o:p></SPAN></P>
<DIV 
style="BORDER-RIGHT: medium none; PADDING-RIGHT: 0in; BORDER-TOP: medium none; PADDING-LEFT: 0in; PADDING-BOTTOM: 1pt; BORDER-LEFT: medium none; PADDING-TOP: 0in; BORDER-BOTTOM: windowtext 0.75pt solid">
<P class=MsoNormal 
style="BORDER-RIGHT: medium none; PADDING-RIGHT: 0in; BORDER-TOP: medium none; PADDING-LEFT: 0in; PADDING-BOTTOM: 0in; BORDER-LEFT: medium none; PADDING-TOP: 0in; BORDER-BOTTOM: medium none; mso-border-bottom-alt: solid windowtext .75pt; mso-padding-alt: 0in 0in 1.0pt 0in">Try 
putting all of these parts together using the file <SPAN 
style="FONT-FAMILY: 'Courier New'"><A 
href="http://www.cse.unl.edu/~jgompert/OS/h.asm">h.asm</A></SPAN> from <A 
href="http://www.cse.unl.edu/~jgompert/OS/lesson3.htm">Lesson 3</A> as a 
starting point.<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Then, using the 
same method described in Lesson 3, assemble your file, copy it to your floppy 
disk and boot with it.<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Have 
fun.<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>If you get stuck, you can look 
at my solution, <A 
href="http://www.cse.unl.edu/~jgompert/OS/helowrld.asm">helowrld.asm</A>, but 
it’s no fair peeking until you’ve tried!</P>
<P class=MsoNormal 
style="BORDER-RIGHT: medium none; PADDING-RIGHT: 0in; BORDER-TOP: medium none; PADDING-LEFT: 0in; PADDING-BOTTOM: 0in; BORDER-LEFT: medium none; PADDING-TOP: 0in; BORDER-BOTTOM: medium none; mso-border-bottom-alt: solid windowtext .75pt; mso-padding-alt: 0in 0in 1.0pt 0in">Once 
you have finished, proceed to the next lesson where we will learn how to make 
our operating system interactive.<SPAN 
style="mso-bidi-font-weight: normal"><o:p></o:p></SPAN></P></DIV>
<P class=MsoNormal><A 
href="http://www.cse.unl.edu/~jgompert/OS/lesson3.htm">Previous Lesson</A><SPAN 
style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
</SPAN><A href="http://www.cse.unl.edu/~jgompert/OS/TableOfContents.htm">Table 
of Contents</A><SPAN 
style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
</SPAN><A href="http://www.cse.unl.edu/~jgompert/OS/lesson5.htm">Next 
Lesson</A><B style="mso-bidi-font-weight: normal"><o:p></o:p></B></P>
<P class=MsoNormal style="MARGIN-BOTTOM: 0pt"><B 
style="mso-bidi-font-weight: normal">© 2001 by Joel Gompert<o:p></o:p></B></P>
<P class=MsoNormal style="MARGIN-BOTTOM: 0pt"><A 
href="mailto:jgompert@cse.unl.edu">jgompert@cse.unl.edu</A></P>
<P class=MsoNormal><A href="http://cse.unl.edu/~jgompert">HOME</A><B 
style="mso-bidi-font-weight: normal"><o:p></o:p></B></P></DIV></BODY></HTML>
